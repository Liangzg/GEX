//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_ByteWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(System.Byte), null);
		L.RegFunction("CompareTo", CompareTo);
		L.RegFunction("Equals", Equals);
		L.RegFunction("GetHashCode", GetHashCode);
		L.RegFunction("Parse", Parse);
		L.RegFunction("TryParse", TryParse);
		L.RegFunction("ToString", ToString);
		L.RegFunction("GetTypeCode", GetTypeCode);
		L.RegFunction("New", _CreateSystem_Byte);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegConstant("MinValue", 0);
		L.RegConstant("MaxValue", 255);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSystem_Byte(IntPtr L)
	{
		System.Byte obj = new System.Byte();
		LuaDLL.lua_pushnumber(L, obj);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CompareTo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(byte), typeof(byte)))
			{
				System.Byte obj = (System.Byte)ToLua.ToObject(L, 1);
				byte arg0 = (byte)LuaDLL.lua_tonumber(L, 2);
				int o = obj.CompareTo(arg0);
				LuaDLL.lua_pushinteger(L, o);
				ToLua.SetBack(L, 1, obj);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(byte), typeof(object)))
			{
				System.Byte obj = (System.Byte)ToLua.ToObject(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				int o = obj.CompareTo(arg0);
				LuaDLL.lua_pushinteger(L, o);
				ToLua.SetBack(L, 1, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Byte.CompareTo");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Equals(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(byte), typeof(byte)))
			{
				System.Byte obj = (System.Byte)ToLua.ToObject(L, 1);
				byte arg0 = (byte)LuaDLL.lua_tonumber(L, 2);
				bool o = obj.Equals(arg0);
				LuaDLL.lua_pushboolean(L, o);
				ToLua.SetBack(L, 1, obj);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(byte), typeof(object)))
			{
				System.Byte obj = (System.Byte)ToLua.ToObject(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				bool o = obj.Equals(arg0);
				LuaDLL.lua_pushboolean(L, o);
				ToLua.SetBack(L, 1, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Byte.Equals");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHashCode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Byte obj = (System.Byte)ToLua.CheckObject(L, 1, typeof(System.Byte));
			int o = obj.GetHashCode();
			LuaDLL.lua_pushinteger(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Parse(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(string)))
			{
				string arg0 = ToLua.ToString(L, 1);
				byte o = System.Byte.Parse(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(System.Globalization.NumberStyles)))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.Globalization.NumberStyles arg1 = (System.Globalization.NumberStyles)ToLua.ToObject(L, 2);
				byte o = System.Byte.Parse(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(System.IFormatProvider)))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				byte o = System.Byte.Parse(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(System.Globalization.NumberStyles), typeof(System.IFormatProvider)))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.Globalization.NumberStyles arg1 = (System.Globalization.NumberStyles)ToLua.ToObject(L, 2);
				System.IFormatProvider arg2 = (System.IFormatProvider)ToLua.ToObject(L, 3);
				byte o = System.Byte.Parse(arg0, arg1, arg2);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Byte.Parse");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TryParse(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(LuaInterface.LuaOut<byte>)))
			{
				string arg0 = ToLua.ToString(L, 1);
				byte arg1;
				bool o = System.Byte.TryParse(arg0, out arg1);
				LuaDLL.lua_pushboolean(L, o);
				LuaDLL.lua_pushnumber(L, arg1);
				return 2;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(System.Globalization.NumberStyles), typeof(System.IFormatProvider), typeof(LuaInterface.LuaOut<byte>)))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.Globalization.NumberStyles arg1 = (System.Globalization.NumberStyles)ToLua.ToObject(L, 2);
				System.IFormatProvider arg2 = (System.IFormatProvider)ToLua.ToObject(L, 3);
				byte arg3;
				bool o = System.Byte.TryParse(arg0, arg1, arg2, out arg3);
				LuaDLL.lua_pushboolean(L, o);
				LuaDLL.lua_pushnumber(L, arg3);
				return 2;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Byte.TryParse");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(byte)))
			{
				System.Byte obj = (System.Byte)ToLua.ToObject(L, 1);
				string o = obj.ToString();
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(byte), typeof(System.IFormatProvider)))
			{
				System.Byte obj = (System.Byte)ToLua.ToObject(L, 1);
				System.IFormatProvider arg0 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				string o = obj.ToString(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(byte), typeof(string)))
			{
				System.Byte obj = (System.Byte)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string o = obj.ToString(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(byte), typeof(string), typeof(System.IFormatProvider)))
			{
				System.Byte obj = (System.Byte)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 3);
				string o = obj.ToString(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Byte.ToString");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTypeCode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Byte obj = (System.Byte)ToLua.CheckObject(L, 1, typeof(System.Byte));
			System.TypeCode o = obj.GetTypeCode();
			ToLua.Push(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}
}

