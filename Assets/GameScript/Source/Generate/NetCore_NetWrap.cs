//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NetCore_NetWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(NetCore.Net), typeof(System.Object));
		L.RegFunction("setIp", setIp);
		L.RegFunction("startNet", startNet);
		L.RegFunction("shutdownNet", shutdownNet);
		L.RegFunction("sendBytes", sendBytes);
		L.RegFunction("pickRevQueue", pickRevQueue);
		L.RegFunction("pushNetTask", pushNetTask);
		L.RegFunction("onNetRecvError", onNetRecvError);
		L.RegFunction("onNetSendError", onNetSendError);
		L.RegFunction("onNetTransError", onNetTransError);
		L.RegFunction("notifyError", notifyError);
		L.RegFunction("CallMethod", CallMethod);
		L.RegFunction("New", _CreateNetCore_Net);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("NetErrorCallback", get_NetErrorCallback, set_NetErrorCallback);
		L.RegFunction("NetError", NetCore_Net_NetError);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateNetCore_Net(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				NetCore.Net obj = new NetCore.Net();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: NetCore.Net.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setIp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			NetCore.Net obj = (NetCore.Net)ToLua.CheckObject(L, 1, typeof(NetCore.Net));
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.setIp(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int startNet(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NetCore.Net obj = (NetCore.Net)ToLua.CheckObject(L, 1, typeof(NetCore.Net));
			obj.startNet();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int shutdownNet(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NetCore.Net obj = (NetCore.Net)ToLua.CheckObject(L, 1, typeof(NetCore.Net));
			obj.shutdownNet();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int sendBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NetCore.Net obj = (NetCore.Net)ToLua.CheckObject(L, 1, typeof(NetCore.Net));
			NetCore.ByteArray arg0 = (NetCore.ByteArray)ToLua.CheckObject(L, 2, typeof(NetCore.ByteArray));
			obj.sendBytes(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int pickRevQueue(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NetCore.Net obj = (NetCore.Net)ToLua.CheckObject(L, 1, typeof(NetCore.Net));
			NetCore.ByteArray o = obj.pickRevQueue();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int pushNetTask(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NetCore.Net obj = (NetCore.Net)ToLua.CheckObject(L, 1, typeof(NetCore.Net));
			NetCore.Net.NetError arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (NetCore.Net.NetError)ToLua.CheckObject(L, 2, typeof(NetCore.Net.NetError));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(NetCore.Net.NetError), func) as NetCore.Net.NetError;
			}

			obj.pushNetTask(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int onNetRecvError(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NetCore.Net obj = (NetCore.Net)ToLua.CheckObject(L, 1, typeof(NetCore.Net));
			obj.onNetRecvError();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int onNetSendError(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NetCore.Net obj = (NetCore.Net)ToLua.CheckObject(L, 1, typeof(NetCore.Net));
			obj.onNetSendError();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int onNetTransError(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NetCore.Net obj = (NetCore.Net)ToLua.CheckObject(L, 1, typeof(NetCore.Net));
			obj.onNetTransError();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int notifyError(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NetCore.Net obj = (NetCore.Net)ToLua.CheckObject(L, 1, typeof(NetCore.Net));
			NetErrorType arg0 = (NetErrorType)ToLua.CheckObject(L, 2, typeof(NetErrorType));
			obj.notifyError(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CallMethod(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			NetCore.Net obj = (NetCore.Net)ToLua.CheckObject(L, 1, typeof(NetCore.Net));
			string arg0 = ToLua.CheckString(L, 2);
			object[] arg1 = ToLua.ToParamsObject(L, 3, count - 2);
			object[] o = obj.CallMethod(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NetErrorCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NetCore.Net obj = (NetCore.Net)o;
			NetCore.Net.NetError ret = obj.NetErrorCallback;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index NetErrorCallback on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_NetErrorCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NetCore.Net obj = (NetCore.Net)o;
			NetCore.Net.NetError arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (NetCore.Net.NetError)ToLua.CheckObject(L, 2, typeof(NetCore.Net.NetError));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(NetCore.Net.NetError), func) as NetCore.Net.NetError;
			}

			obj.NetErrorCallback = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index NetErrorCallback on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NetCore_Net_NetError(IntPtr L)
	{
		try
		{
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);
			Delegate arg1 = DelegateFactory.CreateDelegate(typeof(NetCore.Net.NetError), func);
			ToLua.Push(L, arg1);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

