//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NetCore_ByteArrayQueueWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(NetCore.ByteArrayQueue), typeof(System.Object));
		L.RegFunction("pushBack", pushBack);
		L.RegFunction("pushFront", pushFront);
		L.RegFunction("popBack", popBack);
		L.RegFunction("popFront", popFront);
		L.RegFunction("removeAll", removeAll);
		L.RegFunction("deleteAll", deleteAll);
		L.RegFunction("front", front);
		L.RegFunction("back", back);
		L.RegFunction("frontAndPop", frontAndPop);
		L.RegFunction("backAndPop", backAndPop);
		L.RegFunction("empty", empty);
		L.RegFunction("New", _CreateNetCore_ByteArrayQueue);
		L.RegFunction("__tostring", Lua_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateNetCore_ByteArrayQueue(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				NetCore.ByteArrayQueue obj = new NetCore.ByteArrayQueue();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: NetCore.ByteArrayQueue.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int pushBack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NetCore.ByteArrayQueue obj = (NetCore.ByteArrayQueue)ToLua.CheckObject(L, 1, typeof(NetCore.ByteArrayQueue));
			NetCore.ByteArray arg0 = (NetCore.ByteArray)ToLua.CheckObject(L, 2, typeof(NetCore.ByteArray));
			obj.pushBack(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int pushFront(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NetCore.ByteArrayQueue obj = (NetCore.ByteArrayQueue)ToLua.CheckObject(L, 1, typeof(NetCore.ByteArrayQueue));
			NetCore.ByteArray arg0 = (NetCore.ByteArray)ToLua.CheckObject(L, 2, typeof(NetCore.ByteArray));
			obj.pushFront(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int popBack(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NetCore.ByteArrayQueue obj = (NetCore.ByteArrayQueue)ToLua.CheckObject(L, 1, typeof(NetCore.ByteArrayQueue));
			obj.popBack();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int popFront(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NetCore.ByteArrayQueue obj = (NetCore.ByteArrayQueue)ToLua.CheckObject(L, 1, typeof(NetCore.ByteArrayQueue));
			obj.popFront();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int removeAll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NetCore.ByteArrayQueue obj = (NetCore.ByteArrayQueue)ToLua.CheckObject(L, 1, typeof(NetCore.ByteArrayQueue));
			obj.removeAll();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int deleteAll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NetCore.ByteArrayQueue obj = (NetCore.ByteArrayQueue)ToLua.CheckObject(L, 1, typeof(NetCore.ByteArrayQueue));
			obj.deleteAll();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int front(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NetCore.ByteArrayQueue obj = (NetCore.ByteArrayQueue)ToLua.CheckObject(L, 1, typeof(NetCore.ByteArrayQueue));
			NetCore.ByteArray o = obj.front();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int back(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NetCore.ByteArrayQueue obj = (NetCore.ByteArrayQueue)ToLua.CheckObject(L, 1, typeof(NetCore.ByteArrayQueue));
			NetCore.ByteArray o = obj.back();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int frontAndPop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NetCore.ByteArrayQueue obj = (NetCore.ByteArrayQueue)ToLua.CheckObject(L, 1, typeof(NetCore.ByteArrayQueue));
			NetCore.ByteArray o = obj.frontAndPop();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int backAndPop(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NetCore.ByteArrayQueue obj = (NetCore.ByteArrayQueue)ToLua.CheckObject(L, 1, typeof(NetCore.ByteArrayQueue));
			NetCore.ByteArray o = obj.backAndPop();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int empty(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NetCore.ByteArrayQueue obj = (NetCore.ByteArrayQueue)ToLua.CheckObject(L, 1, typeof(NetCore.ByteArrayQueue));
			bool o = obj.empty();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}
}

