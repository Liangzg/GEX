//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class AssetLoaderWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(AssetLoader), typeof(ASingleton<AssetLoader>));
		L.RegFunction("LoadGameObjectByName", LoadGameObjectByName);
		L.RegFunction("LoadUI", LoadUI);
		L.RegFunction("LoadEffect", LoadEffect);
		L.RegFunction("LoadModel", LoadModel);
		L.RegFunction("LoadGameObject", LoadGameObject);
		L.RegFunction("LoadByteArrayAtPath", LoadByteArrayAtPath);
		L.RegFunction("LoadScene", LoadScene);
		L.RegFunction("AsyncLoadAtPath", AsyncLoadAtPath);
		L.RegFunction("AsyncLoadBundleAtPath", AsyncLoadBundleAtPath);
		L.RegFunction("AsyncLoadBundleByName", AsyncLoadBundleByName);
		L.RegFunction("InitPreLoad", InitPreLoad);
		L.RegFunction("GetBundleName", GetBundleName);
		L.RegFunction("GetBundleEncrypeName", GetBundleEncrypeName);
		L.RegFunction("GetAllDependencies", GetAllDependencies);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("isBundle", get_isBundle, set_isBundle);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadGameObjectByName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			AssetLoader.EAssetType arg1 = (AssetLoader.EAssetType)ToLua.CheckObject(L, 2, typeof(AssetLoader.EAssetType));
			System.Action<UnityEngine.GameObject> arg2 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg2 = (System.Action<UnityEngine.GameObject>)ToLua.CheckObject(L, 3, typeof(System.Action<UnityEngine.GameObject>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg2 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.GameObject>), func) as System.Action<UnityEngine.GameObject>;
			}

			AssetLoader.LoadGameObjectByName(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			System.Action<UnityEngine.GameObject> arg1 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<UnityEngine.GameObject>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.GameObject>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.GameObject>), func) as System.Action<UnityEngine.GameObject>;
			}

			AssetLoader.LoadUI(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadEffect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			System.Action<UnityEngine.GameObject> arg1 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<UnityEngine.GameObject>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.GameObject>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.GameObject>), func) as System.Action<UnityEngine.GameObject>;
			}

			AssetLoader.LoadEffect(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadModel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			System.Action<UnityEngine.GameObject> arg1 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<UnityEngine.GameObject>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.GameObject>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.GameObject>), func) as System.Action<UnityEngine.GameObject>;
			}

			AssetLoader.LoadModel(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadGameObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			System.Action<UnityEngine.GameObject> arg1 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<UnityEngine.GameObject>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.GameObject>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.GameObject>), func) as System.Action<UnityEngine.GameObject>;
			}

			AssetLoader.LoadGameObject(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadByteArrayAtPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			System.Action<byte[]> arg1 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<byte[]>)ToLua.CheckObject(L, 2, typeof(System.Action<byte[]>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<byte[]>), func) as System.Action<byte[]>;
			}

			AssetLoader.LoadByteArrayAtPath(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadScene(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			System.Action<UnityEngine.GameObject> arg1 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<UnityEngine.GameObject>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.GameObject>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.GameObject>), func) as System.Action<UnityEngine.GameObject>;
			}

			System.Action<float,float> arg2 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg2 = (System.Action<float,float>)ToLua.CheckObject(L, 3, typeof(System.Action<float,float>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg2 = DelegateFactory.CreateDelegate(typeof(System.Action<float,float>), func) as System.Action<float,float>;
			}

			System.Collections.IEnumerator o = AssetLoader.LoadScene(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AsyncLoadAtPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			AssetLoader obj = (AssetLoader)ToLua.CheckObject(L, 1, typeof(AssetLoader));
			string arg0 = ToLua.CheckString(L, 2);
			AssetLoader.EAssetBaseType arg1 = (AssetLoader.EAssetBaseType)ToLua.CheckObject(L, 3, typeof(AssetLoader.EAssetBaseType));
			System.Action<object> arg2 = null;
			LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

			if (funcType4 != LuaTypes.LUA_TFUNCTION)
			{
				 arg2 = (System.Action<object>)ToLua.CheckObject(L, 4, typeof(System.Action<object>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 4);
				arg2 = DelegateFactory.CreateDelegate(typeof(System.Action<object>), func) as System.Action<object>;
			}

			System.Collections.IEnumerator o = obj.AsyncLoadAtPath(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AsyncLoadBundleAtPath(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(AssetLoader), typeof(string), typeof(System.Action<UnityEngine.AssetBundle>)))
			{
				AssetLoader obj = (AssetLoader)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				System.Action<UnityEngine.AssetBundle> arg1 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (System.Action<UnityEngine.AssetBundle>)ToLua.ToObject(L, 3);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.AssetBundle>), func) as System.Action<UnityEngine.AssetBundle>;
				}

				System.Collections.IEnumerator o = obj.AsyncLoadBundleAtPath(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(AssetLoader), typeof(string), typeof(System.Action<UnityEngine.AssetBundle>), typeof(System.Action<float,float>)))
			{
				AssetLoader obj = (AssetLoader)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				System.Action<UnityEngine.AssetBundle> arg1 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (System.Action<UnityEngine.AssetBundle>)ToLua.ToObject(L, 3);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.AssetBundle>), func) as System.Action<UnityEngine.AssetBundle>;
				}

				System.Action<float,float> arg2 = null;
				LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

				if (funcType4 != LuaTypes.LUA_TFUNCTION)
				{
					 arg2 = (System.Action<float,float>)ToLua.ToObject(L, 4);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 4);
					arg2 = DelegateFactory.CreateDelegate(typeof(System.Action<float,float>), func) as System.Action<float,float>;
				}

				System.Collections.IEnumerator o = obj.AsyncLoadBundleAtPath(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AssetLoader.AsyncLoadBundleAtPath");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AsyncLoadBundleByName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			AssetLoader obj = (AssetLoader)ToLua.CheckObject(L, 1, typeof(AssetLoader));
			string arg0 = ToLua.CheckString(L, 2);
			AssetLoader.EAssetType arg1 = (AssetLoader.EAssetType)ToLua.CheckObject(L, 3, typeof(AssetLoader.EAssetType));
			System.Action<UnityEngine.AssetBundle> arg2 = null;
			LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

			if (funcType4 != LuaTypes.LUA_TFUNCTION)
			{
				 arg2 = (System.Action<UnityEngine.AssetBundle>)ToLua.CheckObject(L, 4, typeof(System.Action<UnityEngine.AssetBundle>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 4);
				arg2 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.AssetBundle>), func) as System.Action<UnityEngine.AssetBundle>;
			}

			obj.AsyncLoadBundleByName(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitPreLoad(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AssetLoader obj = (AssetLoader)ToLua.CheckObject(L, 1, typeof(AssetLoader));
			System.Action arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action)ToLua.CheckObject(L, 2, typeof(System.Action));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
			}

			System.Collections.IEnumerator o = obj.InitPreLoad(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBundleName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			AssetLoader obj = (AssetLoader)ToLua.CheckObject(L, 1, typeof(AssetLoader));
			string arg0 = ToLua.CheckString(L, 2);
			AssetLoader.EAssetType arg1 = (AssetLoader.EAssetType)ToLua.CheckObject(L, 3, typeof(AssetLoader.EAssetType));
			string o = obj.GetBundleName(arg0, arg1);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBundleEncrypeName(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(AssetLoader), typeof(string)))
			{
				AssetLoader obj = (AssetLoader)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string o = obj.GetBundleEncrypeName(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(AssetLoader), typeof(string), typeof(AssetLoader.EAssetType)))
			{
				AssetLoader obj = (AssetLoader)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				AssetLoader.EAssetType arg1 = (AssetLoader.EAssetType)ToLua.ToObject(L, 3);
				string o = obj.GetBundleEncrypeName(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: AssetLoader.GetBundleEncrypeName");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAllDependencies(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			AssetLoader obj = (AssetLoader)ToLua.CheckObject(L, 1, typeof(AssetLoader));
			string arg0 = ToLua.CheckString(L, 2);
			string[] o = obj.GetAllDependencies(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isBundle(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, AssetLoader.isBundle);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isBundle(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			AssetLoader.isBundle = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

